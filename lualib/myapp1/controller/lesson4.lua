--[[
    lesson4:元表和元方法
    元表是一个可以改变表行为的特殊表，例如改变表的索引行为，定义表的加法行为等。
    `setmetatable` 是 Lua 语言中的一个函数，用于设置或修改表的元表。
]]

--[[
    Lua 中的元方法有很多，以下是一些常见的元方法及其作用，其中最常用的是 `__index` 和 `__newindex`：
    1. `__add(a, b)`: 对两个表进行加法操作时的行为。
    2. `__sub(a, b)`: 对两个表进行减法操作时的行为。
    3. `__mul(a, b)`: 对两个表进行乘法操作时的行为。
    4. `__div(a, b)`: 对两个表进行除法操作时的行为。
    5. `__mod(a, b)`: 对两个表进行取模操作时的行为。
    6. `__pow(a, b)`: 对两个表进行幂运算操作时的行为。
    7. `__unm(a)`: 对表进行取反操作时的行为。
    8. `__concat(a, b)`: 对两个表进行连接操作时的行为。
    9. `__len(a)`: 获取表长度时的行为。
    10. `__eq(a, b)`: 对两个表进行等于操作时的行为。
    11. `__lt(a, b)`: 对两个表进行小于操作时的行为。
    12. `__le(a, b)`: 对两个表进行小于等于操作时的行为。
    13. `__index(a, b)`: 访问表中不存在的字段时的行为。
    14. `__newindex(a, b, c)`: 对表中不存在的字段进行赋值操作时的行为。
    15. `__call(a, ...)`: 当表被当作函数调用时的行为。
    16. `__tostring(a)`: 当表被当作字符串使用时的行为。
    17. `__metatable`: 用于保护元表，当设置为一个表时，将禁止对原表更改元表和获取元表。
]]

-- 示例1：实现俩个表的并集 ------------------------------------------------------------------------------------------------------------------
local coll = require("myapp1.model.collection") -- 加载模块
local set1 = {10, 20, 30} --集合set1
local set2 = {20, 30, 40} --集合set2

local set3 = coll.union(set1, set2) -- 计算并集
for k in pairs(set3) do
	ngx.say(k)
end
-- 需要注意的是，这段代码中的并集操作只适用于元素为数字或字符串的集合，如果集合中的元素是表或其他复杂类型，可能需要更复杂的处理方式。